JavaScript总是严格按照从左到右的顺序来计算表达式

优先级 与 求值顺序是不一样的
优先级可以理解为与什么表达式组合在一起
求值顺序 : 表达式都是左到右的顺序

两目运算符 两个表达式 一个运算符 返回一个结果


通常都是把括号内的表达式看成一个整体 , 运算到了括号 , 才计算括号里面的值 , 因为括号比附近的运算符优先级要高 , 但是也不是整个表达式出现了括号就立即运算里面内容 . 先按照从左到右的顺序以及运算符优先级运算 , 直到运算到了括号左边 , 才运算括号里面内容

a + b * c * (d + e)

2*3*(4+5) 在js中的 计算顺序
是2*3*(4+5) → 6*(4+5) → 6*9 → 54 正确 编程语言里面
还是2*3*(4+5) →  2*3*9 → 6*9 → 54 错

运算到 2的时候 就是2 ; 运算到3的时候 ; 由于左右两边优先级一样 , 所以2 * 3成为一个整体先运算 , 返回6作为运算结果 ; 运算到了4 , 由于括号 , 所以4与右边的优先级高 , (4+5)作为整体先运算 返回9 , 最后 9 找相邻的运算符比优先级 , 右边没有了 , 就与左边的 6* 组合6*9 运算 , 最后返回结果54




---------------------------------------------------------------------------

fn1() || fn2() && fn3()
运算是首先从左到右 先运算fn1() || ,因为 ||有个短操作 , 如果fn1()结果返回true , 则跳出 , 如果false , 则再运算下一步 , 就是返回 || 右边的表达式

运算到了fn2() , 由于 && 比 || 优先级要高 ,  所以不是以fn1() || fn2()组合返回的结果 与 && fn3()运算 , 而是fn2() && fn3()组合返回它们的运算结果 , 作为 || 右边表达式 返回

相当于fn1() || (fn2() && fn3())

所以应该fn2()先运算 && 的短操作 如果是false 返回fn2() 作为 fn2() && fn3() 的结果 . 如果是true , 再运行 fn2() && fn3() , 即返回后者作为fn2() && fn3() 的运算结果

其实优先级高低就是用于组合为一个新整体 这里运算到了fn2()的时候 由于 && 比 || 优先级高  , 所以fn2() && fn3()组合成为一个新整体 , 它们返回的结果再作为 与 || 运算符的 右边表达式返回.

--------------------

fn1() || fn2() && fn3() 其实()都属于运算符

fn1 相邻的运算符就只有() , ()只需要一个表达式就可以运行了 , fn1()运行 返回结果 假设 A

A 相邻的运算符就只有 || , || 短操作只需要一个表达式 , 运行后 ; 如果是false , || 接下来就要两个表达式运算了 , 而且返回结果就是 后面表达式

找向了表达式fn2 fn2相邻的运算符有() || ,()高 , 运行fn2() , 返回 假设B ,

B 相邻的运算符有 || && , && 更高 , 先短操作 ; 如果是true , && 接下来也要两个表达式运算了 , 而且返回结果就是 后面表达式

就找到了fn3 , fn3相邻的运算符有() && , ()高 , 运行fn2() , 返回 假设C ,

C 相邻的运算符只有 && , 所以C 就作为 B && C 结果返回

C 运算符只有 || , 所以C 就作为 A || C 结果返回
---------------

如果是 (fn1() || fn2()) && fn3()

运算到fn2的时候 , 由于括号内优先级高 ,  所以是 fn2() 作为 fn1() || fn2() 整体的运算结果 (由于短操作 , 所以运算到fn2(),就表明 fn1() || fn2() 运算结果就是fn2()), 与fn3()运算

--------------------

fn1() || fn2() && fn3() * fn4() 实际组合是这样fn1() || (fn2() && (fn3() * fn4())) 但是运算顺序还是 fn1 fn2 fn3 fn4





!!!! 当运算到表达式的时候 , 表达式先与优先级高的运算符形成的一个整体运算 , 返回结果 , 作为新的表达式再与优先级低的运算符运算




    var obj = {};
    obj.arr = ["a"];
    // if(!obj.arr){
    //     obj.arr = [];
    // }
    (obj.arr) || (obj.arr = []);
    obj.arr.push(1,2,3,4);
    console.log(obj);

    function fnfalse(){
        console.log("运行了false");
        return false;
    }
    function fntrue(){
        console.log("运行了true");
        return true;
    }
    fnfalse() && (fntrue());



    fn1()*fn2()*(fn3()+fn4())


    JavaScript中运算符优先级的问题 https://www.zhihu.com/question/52116922/answer/129171248